     *** 13. Django Forms and Authentication ***

(1)Using Django’s built-in form handling. 
-  Django provides a powerful form handling system that simplifies 
   the creation, validation, and processing of user input.

 1.Key Features of Django Forms
 - Automatic HTML Form Generation – Creates form fields based on 
   model attributes.

 - Validation Handling – Performs built-in and custom validation.

 - CSRF Protection – Prevents cross-site request forgery attacks.

 - Data Cleaning and Processing – Ensures input consistency before 
   saving to the database.

 2.Types of Forms in Django
 - forms.Form (Basic Forms) – Used for handling user input without models.

 - forms.ModelForm (Model-Backed Forms) – Automatically generates
   form fields from a Django model.

 3.Form Handling Workflow
 - Define the Form – Create a form class in forms.py.

 - Render the Form – Display the form in an HTML template.

 - Process the Form – Handle user input in the view and validate it.

 - Save Data (if needed) – Store valid form data in the database.

 4.Advantages of Django’s Form System
 - Reduces boilerplate code for handling forms.

 - Provides built-in security features.

 - Ensures consistent validation across the application.

(2) Implementing Django’s authentication system (sign up, login, 
    logout, password management).

  1.Key Features of Django Authentication
  - Secure user authentication with password hashing.

  - Built-in login/logout views for session management.

  - Password reset and change functionality included.

  - Supports user permissions and groups for role-based access control.

  2.Core Authentication Functionalities
    a) User Registration (Sign Up)
     - Create a registration form using UserCreationForm.

     - Save the user in the database with encrypted passwords.

    b) User Login
     - Authenticate credentials using authenticate().

     - Start a session with login().

    c) User Logout
     - End the session using logout().

    d) Password Management
     - Change Password – Allows users to update their passwords.

     - Reset Password – Sends a reset link to the user’s email.

  3.Authentication Middleware
  - Django automatically manages user sessions using middleware.

  - The request.user object provides access to the authenticated user.

  4.Advantages of Django Authentication System
  - Built-in security with password hashing and session management.

  - Easy integration with user models and permissions.

  - Extensible for custom authentication backends.


